def bfs(d,n):
    vi=[]
    q=[n]
    while(q):
        for i in d[q[0]]:
            if(i not in q and i not in vi):
                q.append(i)
        vi.append(q.pop(0))
        print(vi[-1])
d={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8,9],9:[2]}
l=[]
bfs(d,5)
  _________________________________________________
  def fun(d,x):
    l.append(x)
    if(x==2):
        print(l)
    for i in d[x]:
        if(i not in l):
            fun(d,i)
    l.pop()
 
d={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
fun(d,5)
____________________________________________________________
  

def least_cost(d1,l,x,e, c,m,l1):
    l.append(x)
    if x == e:
        if c<m:
            m=c
            l1=l.copy()
        l.pop()
        return m,l1
    for i in d1[x]:
        if i[0] not in l:
            m,l1=least_cost(d1,l,i[0], e, c + i[1],m,l1)
    l.pop()
    return m,l1
d1={5:[(7,11),(3,10)],7:[(5,11),(4,12),(3,25)],4:[(7,12),(8,10),(2,13)],8:[(3,15),(4,10),(2,16)],3:[(3,10),(7,14),(8,15)],2:[(4,13),(8,16)]}
l=[]
for i in d1.keys():
    print("least cost",least_cost(d1,[],5,i,0,99999,[]))
_____________________________________________________________________
  def fun(d,x):
    l.append(x)
    for i in d[x]:
        if(i not in l):
            fun(d,i)
 
d={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
fun(d,5)
print(l)
  
